package nebius_test

/*
	У нас есть два массива поисковых результатов.
	Нужно рассчитать количество общих элементов для всех префиксов (от первого элемента до текущего) без учета кратности.
	Для этого будем использовать множества (set), чтобы отслеживать уникальные элементы в каждом префиксе.
	На каждой итерации будем проверять пересечение двух множеств и сохранять размер этого пересечения.
*/
func CountPrefixIntersections(arr1, arr2 []int) []int {
	// Результат - количество общих элементов для каждого префикса
	result := make([]int, max(len(arr1), len(arr2)))

	// Множества для хранения уникальных элементов в префиксах
	set1 := make(map[int]bool)
	set2 := make(map[int]bool)

	// Перебираем префиксы разной длины
	for i := 0; i < max(len(arr1), len(arr2)); i++ {
		// Добавляем новый элемент в первое множество, если есть
		if i < len(arr1) {
			set1[arr1[i]] = true
		}

		// Добавляем новый элемент во второе множество, если есть
		if i < len(arr2) {
			set2[arr2[i]] = true
		}

		// Подсчитываем пересечение множеств
		intersectionCount := 0
		for k := range set1 {
			if set2[k] {
				intersectionCount++
			}
		}

		// Сохраняем результат для текущего префикса
		result[i] = intersectionCount
	}

	return result
}
